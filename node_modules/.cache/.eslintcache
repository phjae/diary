[{"/Users/hyunjaepark/Documents/practice/react-diary/src/index.js":"1","/Users/hyunjaepark/Documents/practice/react-diary/src/App.js":"2","/Users/hyunjaepark/Documents/practice/react-diary/src/component/DiaryEditor/DiaryEditor.js":"3","/Users/hyunjaepark/Documents/practice/react-diary/src/component/DiaryList/DiaryList.js":"4","/Users/hyunjaepark/Documents/practice/react-diary/src/component/DiaryItem/DiaryItem.js":"5","/Users/hyunjaepark/Documents/practice/react-diary/src/OptimizeTest.js":"6"},{"size":255,"mtime":1677289232041,"results":"7","hashOfConfig":"8"},{"size":3488,"mtime":1678276633006,"results":"9","hashOfConfig":"8"},{"size":2203,"mtime":1678274661505,"results":"10","hashOfConfig":"8"},{"size":540,"mtime":1678274673657,"results":"11","hashOfConfig":"8"},{"size":2118,"mtime":1678274837148,"results":"12","hashOfConfig":"8"},{"size":829,"mtime":1678104624311,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"lztz86",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hyunjaepark/Documents/practice/react-diary/src/index.js",[],[],[],"/Users/hyunjaepark/Documents/practice/react-diary/src/App.js",["35","36"],[],"import \"./App.css\";\nimport DiaryEditor from \"./component/DiaryEditor/DiaryEditor\";\nimport DiaryList from \"./component/DiaryList/DiaryList\";\nimport React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n} from \"react\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"INIT\": {\n      return action.data; //action에서 받은 데이터를 전달\n    }\n    case \"CREATE\": {\n      const created_date = new Date().getTime();\n      const newItem = {\n        ...action.data,\n        created_date,\n      };\n      return [newItem, ...state];\n    }\n    case \"DELETE\":\n      return state.filter((d) => d.id !== action.targetId);\n    case \"EDIT\": {\n      return state.map((d) =>\n        d.id === action.targetId ? { ...d, contents: action.newContents } : d\n      );\n    }\n    default:\n      return state;\n  }\n};\nexport const DiaryStateContext = React.createContext();\nexport const DiaryDispatchContext = React.createContext();\n\nfunction App() {\n  //const [data, setData] = useState([]);\n  const [data, dispatch] = useReducer(reducer, []);\n  const dataId = useRef(0);\n\n  const getData = async () => {\n    const res = await fetch(\n      \"https://jsonplaceholder.typicode.com/comments\"\n    ).then((res) => res.json());\n\n    const initData = res.slice(0, 10).map((it) => {\n      return {\n        author: it.email,\n        contents: it.body,\n        emotion: Math.floor(Math.random() * 5) + 1,\n        created_date: new Date().getTime(),\n        id: dataId.current++,\n      };\n    });\n    dispatch({ type: \"INIT\", data: initData });\n    //setData(initData);\n  };\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const onCreate = useCallback((author, contents, emotion) => {\n    dispatch({\n      type: \"CREATE\",\n      data: { author, contents, emotion, id: dataId.current },\n    });\n    //const created_date = new Date().getTime();\n    // const newItem = {\n    //   author,\n    //   contents,\n    //   emotion,\n    //   created_date,\n    //   id: dataId.current,\n    // };\n    dataId.current += 1;\n    // setData((data) => [newItem, ...data]);\n  }, []);\n\n  const onEdit = useCallback((targetId, newContents) => {\n    // setData((data) =>\n    //   data.map((d) => (d.id === targetId ? { ...d, contents: newContents } : d))\n    // );\n    dispatch({ type: \"EDIT\", targetId, newContents });\n  }, []);\n\n  const onDelete = useCallback((targetId) => {\n    //setData((data) => data.filter((it) => it.id !== targetId));\n    dispatch({ type: \"DELETE\", targetId });\n  }, []);\n\n  const getDiaryAnalysis = useMemo(() => {\n    const goodCount = data.filter((it) => it.emotion >= 3).length;\n    const badCount = data.length - goodCount;\n    const goodRatio = (goodCount / data.length) * 100;\n    return { goodCount, badCount, goodRatio };\n  }, [data.length]);\n\n  const { goodCount, badCount, goodRatio } = getDiaryAnalysis;\n\n  const memoizedDispatches = useMemo(() => {\n    return { onCreate, onDelete, onEdit };\n  }, []);\n\n  return (\n    <DiaryStateContext.Provider value={data}>\n      <DiaryDispatchContext.Provider value={memoizedDispatches}>\n        <div className=\"App\">\n          <DiaryEditor />\n          <div>전체 일기: {data.length} </div>\n          <div>기분 좋은 일기 개수: {goodCount} </div>\n          <div>기분 나쁜 일기 개수: {badCount} </div>\n          <div>기분 좋은 일기 비율: {goodRatio} </div>\n          <DiaryList />\n        </div>\n      </DiaryDispatchContext.Provider>\n    </DiaryStateContext.Provider>\n  );\n}\n\nexport default App;\n","/Users/hyunjaepark/Documents/practice/react-diary/src/component/DiaryEditor/DiaryEditor.js",[],[],"/Users/hyunjaepark/Documents/practice/react-diary/src/component/DiaryList/DiaryList.js",[],[],[],"/Users/hyunjaepark/Documents/practice/react-diary/src/component/DiaryItem/DiaryItem.js",[],[],"/Users/hyunjaepark/Documents/practice/react-diary/src/OptimizeTest.js",[],[],{"ruleId":"37","severity":1,"message":"38","line":99,"column":6,"nodeType":"39","endLine":99,"endColumn":19,"suggestions":"40"},{"ruleId":"37","severity":1,"message":"41","line":105,"column":6,"nodeType":"39","endLine":105,"endColumn":8,"suggestions":"42"},"react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'data'. Either include it or remove the dependency array.","ArrayExpression",["43"],"React Hook useMemo has missing dependencies: 'onCreate', 'onDelete', and 'onEdit'. Either include them or remove the dependency array.",["44"],{"desc":"45","fix":"46"},{"desc":"47","fix":"48"},"Update the dependencies array to be: [data]",{"range":"49","text":"50"},"Update the dependencies array to be: [onCreate, onDelete, onEdit]",{"range":"51","text":"52"},[2731,2744],"[data]",[2905,2907],"[onCreate, onDelete, onEdit]"]